{"version":3,"sources":["generated/graphql.tsx","components/character-quantity/character-quantity.tsx","components/character-data/character-data.tsx","components/character-table/character-table.tsx","components/shopping-cart-btn/shopping-cart-btn.tsx","components/app/app.tsx","config/apollo-http-link.ts","config/apollo-error-lnk.ts","config/apollo-local-cache.ts","config/apollo-resolvers.ts","resolvers/get-character.resolver.ts","resolvers/increase-chosen-quantity.resolver.ts","resolvers/decrease-chosen-quantity.resolver.ts","resolvers/set-unit-price.resolver.ts","config/apollo-client.ts","serviceWorker.ts","index.tsx"],"names":["CacheControlScope","CharacterDataFragmentDoc","gql","DecreaseChosenQuantityDocument","GetCharactersDocument","GetShoppingCartDocument","IncreaseChosenQuantityDocument","CharacterQuantity","props","baseOptions","variables","input","id","characterId","ApolloReactHooks","increaseQty","useDecreaseChosenQuantityMutation","decreaseQty","onIncreaseQty","useCallback","onDecreaseQty","Box","display","alignItems","IconButton","color","disabled","chosenQuantity","onClick","Typography","useStyles","makeStyles","theme","createStyles","nameTableCell","characterImg","maxHeight","width","borderRadius","characterName","paddingLeft","spacing","CharacterData","classes","TableRow","TableCell","className","src","character","image","alt","variant","name","species","origin","location","unitPrice","CharacterTable","data","loading","error","CircularProgress","characters","results","TableContainer","component","Paper","Table","TableHead","TableBody","map","key","root","position","bottom","quantityText","top","left","btnElement","padding","ShoppingCartBtn","price","shoppingCart","numActionFigures","Fab","totalPrice","toFixed","paddingTop","paddingBottom","httpLink","HttpLink","uri","errorLink","onError","graphQLErrors","networkError","response","operation","console","message","locations","path","localCache","InMemoryCache","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","freezeResults","localResolvers","Query","getCharacter","context","info","cache","readFragment","fragment","getCacheKey","__typename","Mutation","increaseChosenQuantity","writeFragment","updateCharacter","query","readQuery","getShoppingCart","writeQuery","updateShoppingCart","decreaseChosenQuantity","quantity","Character","apolloClient","ApolloClient","link","ApolloLink","from","connectToDevTools","process","assumeImmutableResults","resolvers","writeData","btoa","Boolean","window","hostname","match","ReactDOM","render","client","Container","justifyContent","alignContent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.981e97fe.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Upload: any,\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type ChangeProductQuantity = {\n  id: Scalars['ID'],\n};\n\nexport type Character = {\n   __typename?: 'Character',\n  chosenQuantity: Scalars['Int'],\n  created?: Maybe<Scalars['String']>,\n  episode?: Maybe<Array<Maybe<Episode>>>,\n  gender?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  image?: Maybe<Scalars['String']>,\n  location?: Maybe<Location>,\n  name?: Maybe<Scalars['String']>,\n  origin?: Maybe<Location>,\n  species?: Maybe<Scalars['String']>,\n  status?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  unitPrice: Scalars['Int'],\n};\n\nexport type Characters = {\n   __typename?: 'Characters',\n  info?: Maybe<Info>,\n  results?: Maybe<Array<Maybe<Character>>>,\n};\n\nexport type Episode = {\n   __typename?: 'Episode',\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  air_date?: Maybe<Scalars['String']>,\n  episode?: Maybe<Scalars['String']>,\n  characters?: Maybe<Array<Maybe<Character>>>,\n  created?: Maybe<Scalars['String']>,\n};\n\nexport type Episodes = {\n   __typename?: 'Episodes',\n  info?: Maybe<Info>,\n  results?: Maybe<Array<Maybe<Episode>>>,\n};\n\nexport type FilterCharacter = {\n  name?: Maybe<Scalars['String']>,\n  status?: Maybe<Scalars['String']>,\n  species?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  gender?: Maybe<Scalars['String']>,\n};\n\nexport type FilterEpisode = {\n  name?: Maybe<Scalars['String']>,\n  episode?: Maybe<Scalars['String']>,\n};\n\nexport type FilterLocation = {\n  name?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  dimension?: Maybe<Scalars['String']>,\n};\n\nexport type Info = {\n   __typename?: 'Info',\n  count?: Maybe<Scalars['Int']>,\n  pages?: Maybe<Scalars['Int']>,\n  next?: Maybe<Scalars['Int']>,\n  prev?: Maybe<Scalars['Int']>,\n};\n\nexport type Location = {\n   __typename?: 'Location',\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  dimension?: Maybe<Scalars['String']>,\n  residents?: Maybe<Array<Maybe<Character>>>,\n  created?: Maybe<Scalars['String']>,\n};\n\nexport type Locations = {\n   __typename?: 'Locations',\n  info?: Maybe<Info>,\n  results?: Maybe<Array<Maybe<Location>>>,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  increaseChosenQuantity?: Maybe<Scalars['Boolean']>,\n  decreaseChosenQuantity?: Maybe<Scalars['Boolean']>,\n};\n\n\nexport type MutationIncreaseChosenQuantityArgs = {\n  input: ChangeProductQuantity\n};\n\n\nexport type MutationDecreaseChosenQuantityArgs = {\n  input: ChangeProductQuantity\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  character?: Maybe<Character>,\n  characters?: Maybe<Characters>,\n  episode?: Maybe<Episode>,\n  episodes?: Maybe<Episodes>,\n  getCharacter?: Maybe<Character>,\n  location?: Maybe<Location>,\n  locations?: Maybe<Locations>,\n  shoppingCart: ShoppingCart,\n};\n\n\nexport type QueryCharacterArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type QueryCharactersArgs = {\n  page?: Maybe<Scalars['Int']>,\n  filter?: Maybe<FilterCharacter>\n};\n\n\nexport type QueryEpisodeArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type QueryEpisodesArgs = {\n  page?: Maybe<Scalars['Int']>,\n  filter?: Maybe<FilterEpisode>\n};\n\n\nexport type QueryGetCharacterArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryLocationArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type QueryLocationsArgs = {\n  page?: Maybe<Scalars['Int']>,\n  filter?: Maybe<FilterLocation>\n};\n\nexport type ShoppingCart = {\n   __typename?: 'ShoppingCart',\n  id: Scalars['ID'],\n  totalPrice: Scalars['Int'],\n  numActionFigures: Scalars['Int'],\n};\n\n\nexport type CharacterDataFragment = (\n  { __typename: 'Character' }\n  & Pick<Character, 'id' | 'name' | 'unitPrice' | 'chosenQuantity'>\n);\n\nexport type DecreaseChosenQuantityMutationVariables = {\n  input: ChangeProductQuantity\n};\n\n\nexport type DecreaseChosenQuantityMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'decreaseChosenQuantity'>\n);\n\nexport type GetCharacterQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type GetCharacterQuery = (\n  { __typename?: 'Query' }\n  & { getCharacter: Maybe<(\n    { __typename?: 'Character' }\n    & CharacterDataFragment\n  )> }\n);\n\nexport type GetCharactersQueryVariables = {};\n\n\nexport type GetCharactersQuery = (\n  { __typename?: 'Query' }\n  & { characters: Maybe<(\n    { __typename: 'Characters' }\n    & { results: Maybe<Array<Maybe<(\n      { __typename: 'Character' }\n      & Pick<Character, 'id' | 'name' | 'image' | 'species' | 'chosenQuantity' | 'unitPrice'>\n      & { origin: Maybe<(\n        { __typename: 'Location' }\n        & Pick<Location, 'id' | 'name'>\n      )>, location: Maybe<(\n        { __typename: 'Location' }\n        & Pick<Location, 'id' | 'name'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type GetShoppingCartQueryVariables = {};\n\n\nexport type GetShoppingCartQuery = (\n  { __typename?: 'Query' }\n  & { shoppingCart: (\n    { __typename: 'ShoppingCart' }\n    & Pick<ShoppingCart, 'id' | 'totalPrice' | 'numActionFigures'>\n  ) }\n);\n\nexport type IncreaseChosenQuantityMutationVariables = {\n  input: ChangeProductQuantity\n};\n\n\nexport type IncreaseChosenQuantityMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'increaseChosenQuantity'>\n);\n\nexport const CharacterDataFragmentDoc = gql`\n    fragment characterData on Character {\n  id\n  __typename\n  name\n  unitPrice @client\n  chosenQuantity @client\n}\n    `;\nexport const DecreaseChosenQuantityDocument = gql`\n    mutation DecreaseChosenQuantity($input: ChangeProductQuantity!) {\n  decreaseChosenQuantity(input: $input) @client\n}\n    `;\nexport type DecreaseChosenQuantityMutationFn = ApolloReactCommon.MutationFunction<DecreaseChosenQuantityMutation, DecreaseChosenQuantityMutationVariables>;\nexport type DecreaseChosenQuantityComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DecreaseChosenQuantityMutation, DecreaseChosenQuantityMutationVariables>, 'mutation'>;\n\n    export const DecreaseChosenQuantityComponent = (props: DecreaseChosenQuantityComponentProps) => (\n      <ApolloReactComponents.Mutation<DecreaseChosenQuantityMutation, DecreaseChosenQuantityMutationVariables> mutation={DecreaseChosenQuantityDocument} {...props} />\n    );\n    \nexport type DecreaseChosenQuantityProps<TChildProps = {}> = ApolloReactHoc.MutateProps<DecreaseChosenQuantityMutation, DecreaseChosenQuantityMutationVariables> & TChildProps;\nexport function withDecreaseChosenQuantity<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  DecreaseChosenQuantityMutation,\n  DecreaseChosenQuantityMutationVariables,\n  DecreaseChosenQuantityProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, DecreaseChosenQuantityMutation, DecreaseChosenQuantityMutationVariables, DecreaseChosenQuantityProps<TChildProps>>(DecreaseChosenQuantityDocument, {\n      alias: 'decreaseChosenQuantity',\n      ...operationOptions\n    });\n};\n\n/**\n * __useDecreaseChosenQuantityMutation__\n *\n * To run a mutation, you first call `useDecreaseChosenQuantityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDecreaseChosenQuantityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [decreaseChosenQuantityMutation, { data, loading, error }] = useDecreaseChosenQuantityMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDecreaseChosenQuantityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DecreaseChosenQuantityMutation, DecreaseChosenQuantityMutationVariables>) {\n        return ApolloReactHooks.useMutation<DecreaseChosenQuantityMutation, DecreaseChosenQuantityMutationVariables>(DecreaseChosenQuantityDocument, baseOptions);\n      }\nexport type DecreaseChosenQuantityMutationHookResult = ReturnType<typeof useDecreaseChosenQuantityMutation>;\nexport type DecreaseChosenQuantityMutationResult = ApolloReactCommon.MutationResult<DecreaseChosenQuantityMutation>;\nexport type DecreaseChosenQuantityMutationOptions = ApolloReactCommon.BaseMutationOptions<DecreaseChosenQuantityMutation, DecreaseChosenQuantityMutationVariables>;\nexport const GetCharacterDocument = gql`\n    query GetCharacter($id: ID!) {\n  getCharacter(id: $id) @client {\n    ...characterData\n  }\n}\n    ${CharacterDataFragmentDoc}`;\nexport type GetCharacterComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetCharacterQuery, GetCharacterQueryVariables>, 'query'> & ({ variables: GetCharacterQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetCharacterComponent = (props: GetCharacterComponentProps) => (\n      <ApolloReactComponents.Query<GetCharacterQuery, GetCharacterQueryVariables> query={GetCharacterDocument} {...props} />\n    );\n    \nexport type GetCharacterProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetCharacterQuery, GetCharacterQueryVariables> & TChildProps;\nexport function withGetCharacter<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetCharacterQuery,\n  GetCharacterQueryVariables,\n  GetCharacterProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetCharacterQuery, GetCharacterQueryVariables, GetCharacterProps<TChildProps>>(GetCharacterDocument, {\n      alias: 'getCharacter',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetCharacterQuery__\n *\n * To run a query within a React component, call `useGetCharacterQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCharacterQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCharacterQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetCharacterQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCharacterQuery, GetCharacterQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetCharacterQuery, GetCharacterQueryVariables>(GetCharacterDocument, baseOptions);\n      }\nexport function useGetCharacterLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCharacterQuery, GetCharacterQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetCharacterQuery, GetCharacterQueryVariables>(GetCharacterDocument, baseOptions);\n        }\nexport type GetCharacterQueryHookResult = ReturnType<typeof useGetCharacterQuery>;\nexport type GetCharacterLazyQueryHookResult = ReturnType<typeof useGetCharacterLazyQuery>;\nexport type GetCharacterQueryResult = ApolloReactCommon.QueryResult<GetCharacterQuery, GetCharacterQueryVariables>;\nexport const GetCharactersDocument = gql`\n    query GetCharacters {\n  characters {\n    __typename\n    results {\n      id\n      __typename\n      name\n      image\n      species\n      chosenQuantity @client\n      unitPrice @client\n      origin {\n        id\n        __typename\n        name\n      }\n      location {\n        id\n        __typename\n        name\n      }\n    }\n  }\n}\n    `;\nexport type GetCharactersComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetCharactersQuery, GetCharactersQueryVariables>, 'query'>;\n\n    export const GetCharactersComponent = (props: GetCharactersComponentProps) => (\n      <ApolloReactComponents.Query<GetCharactersQuery, GetCharactersQueryVariables> query={GetCharactersDocument} {...props} />\n    );\n    \nexport type GetCharactersProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetCharactersQuery, GetCharactersQueryVariables> & TChildProps;\nexport function withGetCharacters<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetCharactersQuery,\n  GetCharactersQueryVariables,\n  GetCharactersProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetCharactersQuery, GetCharactersQueryVariables, GetCharactersProps<TChildProps>>(GetCharactersDocument, {\n      alias: 'getCharacters',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetCharactersQuery__\n *\n * To run a query within a React component, call `useGetCharactersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCharactersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCharactersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCharactersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCharactersQuery, GetCharactersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetCharactersQuery, GetCharactersQueryVariables>(GetCharactersDocument, baseOptions);\n      }\nexport function useGetCharactersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCharactersQuery, GetCharactersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetCharactersQuery, GetCharactersQueryVariables>(GetCharactersDocument, baseOptions);\n        }\nexport type GetCharactersQueryHookResult = ReturnType<typeof useGetCharactersQuery>;\nexport type GetCharactersLazyQueryHookResult = ReturnType<typeof useGetCharactersLazyQuery>;\nexport type GetCharactersQueryResult = ApolloReactCommon.QueryResult<GetCharactersQuery, GetCharactersQueryVariables>;\nexport const GetShoppingCartDocument = gql`\n    query GetShoppingCart {\n  shoppingCart @client {\n    id\n    __typename\n    totalPrice\n    numActionFigures\n  }\n}\n    `;\nexport type GetShoppingCartComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetShoppingCartQuery, GetShoppingCartQueryVariables>, 'query'>;\n\n    export const GetShoppingCartComponent = (props: GetShoppingCartComponentProps) => (\n      <ApolloReactComponents.Query<GetShoppingCartQuery, GetShoppingCartQueryVariables> query={GetShoppingCartDocument} {...props} />\n    );\n    \nexport type GetShoppingCartProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetShoppingCartQuery, GetShoppingCartQueryVariables> & TChildProps;\nexport function withGetShoppingCart<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetShoppingCartQuery,\n  GetShoppingCartQueryVariables,\n  GetShoppingCartProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetShoppingCartQuery, GetShoppingCartQueryVariables, GetShoppingCartProps<TChildProps>>(GetShoppingCartDocument, {\n      alias: 'getShoppingCart',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetShoppingCartQuery__\n *\n * To run a query within a React component, call `useGetShoppingCartQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetShoppingCartQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetShoppingCartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetShoppingCartQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetShoppingCartQuery, GetShoppingCartQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetShoppingCartQuery, GetShoppingCartQueryVariables>(GetShoppingCartDocument, baseOptions);\n      }\nexport function useGetShoppingCartLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetShoppingCartQuery, GetShoppingCartQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetShoppingCartQuery, GetShoppingCartQueryVariables>(GetShoppingCartDocument, baseOptions);\n        }\nexport type GetShoppingCartQueryHookResult = ReturnType<typeof useGetShoppingCartQuery>;\nexport type GetShoppingCartLazyQueryHookResult = ReturnType<typeof useGetShoppingCartLazyQuery>;\nexport type GetShoppingCartQueryResult = ApolloReactCommon.QueryResult<GetShoppingCartQuery, GetShoppingCartQueryVariables>;\nexport const IncreaseChosenQuantityDocument = gql`\n    mutation IncreaseChosenQuantity($input: ChangeProductQuantity!) {\n  increaseChosenQuantity(input: $input) @client\n}\n    `;\nexport type IncreaseChosenQuantityMutationFn = ApolloReactCommon.MutationFunction<IncreaseChosenQuantityMutation, IncreaseChosenQuantityMutationVariables>;\nexport type IncreaseChosenQuantityComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<IncreaseChosenQuantityMutation, IncreaseChosenQuantityMutationVariables>, 'mutation'>;\n\n    export const IncreaseChosenQuantityComponent = (props: IncreaseChosenQuantityComponentProps) => (\n      <ApolloReactComponents.Mutation<IncreaseChosenQuantityMutation, IncreaseChosenQuantityMutationVariables> mutation={IncreaseChosenQuantityDocument} {...props} />\n    );\n    \nexport type IncreaseChosenQuantityProps<TChildProps = {}> = ApolloReactHoc.MutateProps<IncreaseChosenQuantityMutation, IncreaseChosenQuantityMutationVariables> & TChildProps;\nexport function withIncreaseChosenQuantity<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  IncreaseChosenQuantityMutation,\n  IncreaseChosenQuantityMutationVariables,\n  IncreaseChosenQuantityProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, IncreaseChosenQuantityMutation, IncreaseChosenQuantityMutationVariables, IncreaseChosenQuantityProps<TChildProps>>(IncreaseChosenQuantityDocument, {\n      alias: 'increaseChosenQuantity',\n      ...operationOptions\n    });\n};\n\n/**\n * __useIncreaseChosenQuantityMutation__\n *\n * To run a mutation, you first call `useIncreaseChosenQuantityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useIncreaseChosenQuantityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [increaseChosenQuantityMutation, { data, loading, error }] = useIncreaseChosenQuantityMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useIncreaseChosenQuantityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<IncreaseChosenQuantityMutation, IncreaseChosenQuantityMutationVariables>) {\n        return ApolloReactHooks.useMutation<IncreaseChosenQuantityMutation, IncreaseChosenQuantityMutationVariables>(IncreaseChosenQuantityDocument, baseOptions);\n      }\nexport type IncreaseChosenQuantityMutationHookResult = ReturnType<typeof useIncreaseChosenQuantityMutation>;\nexport type IncreaseChosenQuantityMutationResult = ApolloReactCommon.MutationResult<IncreaseChosenQuantityMutation>;\nexport type IncreaseChosenQuantityMutationOptions = ApolloReactCommon.BaseMutationOptions<IncreaseChosenQuantityMutation, IncreaseChosenQuantityMutationVariables>;\n\n      export interface IntrospectionResultData {\n        __schema: {\n          types: {\n            kind: string;\n            name: string;\n            possibleTypes: {\n              name: string;\n            }[];\n          }[];\n        };\n      }\n      const result: IntrospectionResultData = {\n  \"__schema\": {\n    \"types\": []\n  }\n};\n      export default result;\n    ","import React, { ReactElement, useCallback } from 'react';\nimport { Box, IconButton, Typography } from '@material-ui/core';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport {\n  useIncreaseChosenQuantityMutation,\n  useDecreaseChosenQuantityMutation,\n} from '../../generated/graphql';\n\ninterface Props {\n  characterId: string;\n  chosenQuantity: number;\n}\n\nexport default function CharacterQuantity(props: Props): ReactElement {\n  const [increaseQty] = useIncreaseChosenQuantityMutation({\n    variables: { input: { id: props.characterId } },\n  });\n  const [decreaseQty] = useDecreaseChosenQuantityMutation();\n\n  const onIncreaseQty = useCallback(() => {\n    increaseQty();\n  }, [increaseQty]);\n  const onDecreaseQty = useCallback(() => {\n    decreaseQty({ variables: { input: { id: props.characterId } } });\n  }, [props.characterId, decreaseQty]);\n\n  return (\n    <Box display='flex' alignItems='center'>\n      <IconButton color='primary' disabled={props.chosenQuantity <= 0} onClick={onDecreaseQty}>\n        <ChevronLeftIcon />\n      </IconButton>\n      <Typography>{props.chosenQuantity}</Typography>\n      <IconButton color='primary' onClick={onIncreaseQty}>\n        <ChevronRightIcon />\n      </IconButton>\n    </Box>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { Character, Maybe } from '../../generated/graphql';\nimport {\n  TableRow,\n  TableCell,\n  makeStyles,\n  Theme,\n  createStyles,\n  Box,\n  Typography,\n} from '@material-ui/core';\nimport CharacterQuantity from '../character-quantity/character-quantity';\n\ninterface Props {\n  character: Maybe<Character | null>;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nameTableCell: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n    characterImg: {\n      maxHeight: '3rem',\n      width: 'auto',\n      borderRadius: '50%',\n    },\n    characterName: {\n      paddingLeft: theme.spacing(2),\n    },\n  })\n);\n\nexport default function CharacterData(props: Props): ReactElement {\n  const classes = useStyles();\n\n  return (\n    <TableRow>\n      <TableCell className={classes.nameTableCell}>\n        <Box>\n          <img src={props.character?.image!} alt='' className={classes.characterImg} />\n        </Box>\n        <Typography variant='body2' className={classes.characterName}>\n          {props.character?.name}\n        </Typography>\n      </TableCell>\n      <TableCell>{props.character?.species}</TableCell>\n      <TableCell>{props.character?.origin?.name}</TableCell>\n      <TableCell>{props.character?.location?.name}</TableCell>\n      <TableCell>{props.character?.unitPrice}</TableCell>\n      <TableCell>\n        <CharacterQuantity\n          characterId={props.character?.id!}\n          chosenQuantity={props.character?.chosenQuantity!}\n        />\n      </TableCell>\n    </TableRow>\n  );\n}\n","import {\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@material-ui/core';\nimport React, { ReactElement } from 'react';\nimport { useGetCharactersQuery } from '../../generated/graphql';\nimport CharacterData from '../character-data/character-data';\n\ninterface Props {}\n\nexport default function CharacterTable(props: Props): ReactElement {\n  // Use hook to retrieve data from the backend\n  const { data, loading, error } = useGetCharactersQuery();\n\n  // Query state management\n  if (loading) {\n    return <CircularProgress />;\n  } else if (error) {\n    return (\n      <Typography variant='h5'>\n        Error retrieving data, please reload the page to try again.\n      </Typography>\n    );\n  } else if (!data || !data.characters || !data.characters.results) {\n    return (\n      <Typography variant='h5'>No data available, please reload the page to try again.</Typography>\n    );\n  }\n\n  // Display the data\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>\n              <strong>Name</strong>\n            </TableCell>\n            <TableCell>\n              <strong>Species</strong>\n            </TableCell>\n            <TableCell>\n              <strong>Origin</strong>\n            </TableCell>\n            <TableCell>\n              <strong>Location</strong>\n            </TableCell>\n            <TableCell>\n              <strong>Price</strong>\n            </TableCell>\n            <TableCell>\n              <strong>Quantity</strong>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.characters.results.map(character => (\n            <CharacterData character={character} key={character?.id!} />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { Fab, Box, makeStyles, createStyles, Theme, Typography } from '@material-ui/core';\nimport { useGetShoppingCartQuery } from '../../generated/graphql';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'fixed',\n      bottom: theme.spacing(4),\n    },\n    quantityText: {\n      position: 'absolute',\n      top: '4px',\n      left: '50px',\n      color: 'white',\n    },\n    btnElement: {\n      padding: theme.spacing(1),\n    },\n  })\n);\n\nexport default function ShoppingCartBtn(): ReactElement {\n  const classes = useStyles();\n  const { data } = useGetShoppingCartQuery();\n\n  if (!data || data.shoppingCart.numActionFigures <= 0) {\n    return <Box className={classes.root} />;\n  }\n\n  return (\n    <Box className={classes.root}>\n      <Fab variant='extended' color='primary'>\n        <Box>\n          <ShoppingCartIcon className={classes.btnElement} />\n          <Typography variant='caption' className={classes.quantityText}>\n            {data.shoppingCart.numActionFigures}\n          </Typography>\n        </Box>\n\n        <Typography className={classes.btnElement}>\n          {formatPrice(data.shoppingCart.totalPrice)}\n        </Typography>\n      </Fab>\n    </Box>\n  );\n}\n\nfunction formatPrice(price: number) {\n  return `US$ ${price.toFixed(2)}`;\n}\n","import React, { ReactElement } from 'react';\nimport { Container, Box, Theme, makeStyles, createStyles } from '@material-ui/core';\nimport CharacterTable from '../character-table/character-table';\nimport ShoppingCartBtn from '../shopping-cart-btn/shopping-cart-btn';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n  })\n);\n\nexport default function App(): ReactElement {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.root}>\n      <Box display='flex' justifyContent='center' alignContent='center'>\n        <CharacterTable />\n        <ShoppingCartBtn />\n      </Box>\n    </Container>\n  );\n}\n","import { HttpLink } from 'apollo-link-http';\n\nexport const httpLink = new HttpLink({\n  uri: 'https://rickandmortyapi.com/graphql',\n});\n","import { onError } from 'apollo-link-error';\n\nexport const errorLink = onError(({ graphQLErrors, networkError, response, operation }) => {\n  if (graphQLErrors) {\n    for (const error of graphQLErrors) {\n      console.error(\n        `[GraphQL error]: Message: ${error.message}, Location: ${error.locations}, Path: ${error.path}`,\n        operation,\n        response\n      );\n    }\n  }\n  if (networkError) {\n    console.error(`[Network error]: ${networkError}`, operation, response);\n  }\n});\n","import { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport introspectionQueryResultData from '../generated/fragment-matcher.json';\n\nexport const localCache = new InMemoryCache({\n  fragmentMatcher: new IntrospectionFragmentMatcher({ introspectionQueryResultData }),\n  freezeResults: true,\n});\n\nexport function initLocalCache() {\n  localCache.writeData({\n    data: {\n      shoppingCart: {\n        __typename: 'ShoppingCart',\n        id: btoa('ShoppingCart:1'),\n        totalPrice: 0,\n        numActionFigures: 0,\n      },\n    },\n  });\n}\n","import setUnitPrice from '../resolvers/set-unit-price.resolver';\nimport increaseChosenQuantity from '../resolvers/increase-chosen-quantity.resolver';\nimport decreaseChosenQuantity from '../resolvers/decrease-chosen-quantity.resolver';\nimport getCharacter from '../resolvers/get-character.resolver';\n\nexport const localResolvers = {\n  Query: {\n    getCharacter,\n  },\n  Mutation: {\n    increaseChosenQuantity,\n    decreaseChosenQuantity,\n  },\n  Character: {\n    chosenQuantity: () => 0,\n    unitPrice: setUnitPrice,\n  },\n};\n","import { InMemoryCache } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-client';\nimport {\n  CharacterDataFragmentDoc,\n  CharacterDataFragment,\n  GetCharacterQueryVariables,\n} from '../generated/graphql';\n\nexport default function getCharacter(\n  root: any,\n  variables: GetCharacterQueryVariables,\n  context: { cache: InMemoryCache; getCacheKey: any; client: ApolloClient<any> },\n  info: any\n) {\n  return context.cache.readFragment<CharacterDataFragment>({\n    fragment: CharacterDataFragmentDoc,\n    id: context.getCacheKey({ id: variables.id, __typename: 'Character' }),\n  });\n}\n","import ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport {\n  CharacterDataFragment,\n  CharacterDataFragmentDoc,\n  IncreaseChosenQuantityMutationVariables,\n  GetShoppingCartQuery,\n  GetShoppingCartDocument,\n} from '../generated/graphql';\n\nexport default function increaseChosenQuantity(\n  root: any,\n  variables: IncreaseChosenQuantityMutationVariables,\n  context: { cache: InMemoryCache; getCacheKey: any; client: ApolloClient<any> },\n  info: any\n) {\n  const character = getCharacterFromCache(variables.input.id, context.cache, context.getCacheKey);\n  if (!character) {\n    return false;\n  }\n\n  updateCharacter(character, context.cache, context.getCacheKey);\n  updateShoppingCart(character, context.cache);\n\n  return true;\n}\n\nfunction getCharacterFromCache(id: string, cache: InMemoryCache, getCacheKey: any) {\n  return cache.readFragment<CharacterDataFragment>({\n    fragment: CharacterDataFragmentDoc,\n    id: getCacheKey({ id, __typename: 'Character' }),\n  });\n}\n\nfunction updateCharacter(character: CharacterDataFragment, cache: InMemoryCache, getCacheKey: any) {\n  cache.writeFragment<CharacterDataFragment>({\n    fragment: CharacterDataFragmentDoc,\n    id: getCacheKey({ id: character.id, __typename: 'Character' }),\n    data: {\n      ...character,\n      chosenQuantity: character.chosenQuantity + 1,\n    },\n  });\n}\n\nfunction updateShoppingCart(character: CharacterDataFragment, cache: InMemoryCache) {\n  const shoppingCart = getShoppingCart(cache);\n  if (!shoppingCart) {\n    return false;\n  }\n\n  cache.writeQuery<GetShoppingCartQuery>({\n    query: GetShoppingCartDocument,\n    data: {\n      shoppingCart: {\n        ...shoppingCart,\n        numActionFigures: shoppingCart.numActionFigures + 1,\n        totalPrice: shoppingCart.totalPrice + character.unitPrice,\n      },\n    },\n  });\n}\n\nfunction getShoppingCart(cache: InMemoryCache) {\n  const query = cache.readQuery<GetShoppingCartQuery>({\n    query: GetShoppingCartDocument,\n  });\n\n  return query?.shoppingCart;\n}\n","import ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport {\n  CharacterDataFragment,\n  CharacterDataFragmentDoc,\n  IncreaseChosenQuantityMutationVariables,\n  GetShoppingCartQuery,\n  GetShoppingCartDocument,\n} from '../generated/graphql';\n\nexport default function decreaseChosenQuantity(\n  root: any,\n  variables: IncreaseChosenQuantityMutationVariables,\n  context: { cache: InMemoryCache; getCacheKey: any; client: ApolloClient<any> },\n  info: any\n) {\n  const character = getCharacterFromCache(variables.input.id, context.cache, context.getCacheKey);\n  if (!character) {\n    return false;\n  }\n\n  updateCharacter(character, context.cache, context.getCacheKey);\n  updateShoppingCart(character, context.cache);\n\n  return true;\n}\n\nfunction getCharacterFromCache(id: string, cache: InMemoryCache, getCacheKey: any) {\n  return cache.readFragment<CharacterDataFragment>({\n    fragment: CharacterDataFragmentDoc,\n    id: getCacheKey({ id, __typename: 'Character' }),\n  });\n}\n\nfunction updateCharacter(character: CharacterDataFragment, cache: InMemoryCache, getCacheKey: any) {\n  let quantity = character.chosenQuantity - 1;\n  if (quantity < 0) {\n    quantity = 0;\n  }\n\n  cache.writeFragment<CharacterDataFragment>({\n    fragment: CharacterDataFragmentDoc,\n    id: getCacheKey({ id: character.id, __typename: 'Character' }),\n    data: {\n      ...character,\n      chosenQuantity: quantity,\n    },\n  });\n}\n\nfunction updateShoppingCart(character: CharacterDataFragment, cache: InMemoryCache) {\n  const shoppingCart = getShoppingCart(cache);\n  if (!shoppingCart) {\n    return false;\n  }\n\n  let quantity = shoppingCart.numActionFigures - 1;\n  if (quantity < 0) {\n    quantity = 0;\n  }\n\n  let price = shoppingCart.totalPrice - character.unitPrice;\n  if (price < 0) {\n    price = 0;\n  }\n\n  cache.writeQuery<GetShoppingCartQuery>({\n    query: GetShoppingCartDocument,\n    data: {\n      shoppingCart: {\n        ...shoppingCart,\n        numActionFigures: quantity,\n        totalPrice: price,\n      },\n    },\n  });\n}\n\nfunction getShoppingCart(cache: InMemoryCache) {\n  const query = cache.readQuery<GetShoppingCartQuery>({\n    query: GetShoppingCartDocument,\n  });\n\n  return query?.shoppingCart;\n}\n","import ApolloClient from 'apollo-client';\nimport { Character } from '../generated/graphql';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nexport default function setUnitPrice(\n  root: Character,\n  variables: any,\n  context: { cache: InMemoryCache; getCacheKey: any; client: ApolloClient<any> },\n  info: any\n) {\n  switch (root.name) {\n    case 'Rick Sanchez':\n      return 10;\n\n    case 'Morty Smith':\n      return 10;\n\n    default:\n      return 5;\n  }\n}\n","import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { httpLink } from './apollo-http-link';\nimport { errorLink } from './apollo-error-lnk';\nimport { localCache, initLocalCache } from './apollo-local-cache';\nimport { localResolvers } from './apollo-resolvers';\n\nexport const apolloClient = new ApolloClient({\n  link: ApolloLink.from([errorLink, httpLink]),\n  connectToDevTools: process.env.NODE_ENV !== 'production',\n  cache: localCache,\n  assumeImmutableResults: true,\n  resolvers: localResolvers,\n});\n\ninitLocalCache();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport { apolloClient } from './config/apollo-client';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ApolloProvider client={apolloClient}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}